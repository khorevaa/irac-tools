// ----------------------------------------------------------
// This Source Code Form is subject to the terms of the
// Mozilla Public License, v.2.0. If a copy of the MPL
// was not distributed with this file, You can obtain one
// at http://mozilla.org/MPL/2.0/.
// ----------------------------------------------------------
// Codebase: https://github.com/ArKuznetsov/irac-tools/
// ----------------------------------------------------------

Перем Лог;

#Область СлужебныйПрограммныйИнтерфейс

// Функция - возвращает объект управления логированием
//
// Возвращаемое значение:
//  Объект      - объект управления логированием
//
Функция Лог() Экспорт
	
	Возврат Лог;

КонецФункции // Лог()

// Процедура - устанавливает описание команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект описание команды
//
Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Аргумент("PATH",
					 "",
					 "путь к файлу вывода информации о кластере (если не указан выводится в консоль)")
	       .ТСтрока()
	       .Обязательный(Ложь);

КонецПроцедуры // ОписаниеКоманды()

// Процедура - запускает выполнение команды
//
// Параметры:
//  Команда    - КомандаПриложения     - объект  описание команды
//
Процедура ВыполнитьКоманду(Знач Команда) Экспорт

	Лог = ПараметрыПриложения.Лог();

	ВыводОтладочнойИнформации = Команда.ЗначениеОпции("verbose");
	РежимТестирования         = Команда.ЗначениеОпции("test");
	СервисАдминистрирования   = Команда.ЗначениеОпции("ras");
	Кластер                   = Команда.ЗначениеОпции("cluster");
	ИмяПользователяКластер    = Команда.ЗначениеОпции("cluster-user");
	ПарольПользователяКластер = Команда.ЗначениеОпции("cluster-pwd");

	ПараметрыОбработки        = Команда.ЗначениеАргумента("PATH");

	ПараметрыПриложения.УстановитьРежимОтладкиПриНеобходимости(ВыводОтладочнойИнформации);
						
	ОписаниеАгента = СтрРазделить(СервисАдминистрирования, ":");

	АдресСервиса = "localhost";
	ПортСервиса = "1545";
	Если ОписаниеАгента.Количество() > 0 Тогда
		АдресСервиса = ОписаниеАгента[0];
	КонецЕсли;
	Если ОписаниеАгента.Количество() > 1 Тогда
		ПортСервиса = ОписаниеАгента[1];
	КонецЕсли;

	АгентКластера = Новый АдминистрированиеКластера(АдресСервиса, ПортСервиса, "");
	
	ИсполнительКоманд = Новый ИсполнительКоманд("8.3");

	АгентКластера.УстановитьИсполнительКоманд(ИсполнительКоманд);

	Кластеры = АгентКластера.Кластеры().Список();

	Для Каждого ТекКластер Из Кластеры Цикл
		Параметры = ТекКластер.ПараметрыОбъекта();
		Для Каждого ТекПараметр Из Параметры Цикл
			Сообщить(СтрШаблон("%1 : %2", ТекПараметр.Значение.ИмяРАК, ТекКластер.Получить(ТекПараметр.Ключ)));
		КонецЦикла;

		Сообщить("----------");
		Сообщить("Серверы:");
		Сообщить("----------");
		Серверы = ТекКластер.Серверы().Список();
		Для Каждого ТекСервер Из Серверы Цикл
			Параметры = ТекСервер.ПараметрыОбъекта();
			Для Каждого ТекПараметр Из Параметры Цикл
				Сообщить(СтрШаблон("%1 : %2", ТекПараметр.Значение.ИмяРАК, ТекСервер.Получить(ТекПараметр.Ключ)));
			КонецЦикла;
			Сообщить("----------");
		КонецЦикла;

		Сообщить("----------");
		Сообщить("Менеджеры:");
		Сообщить("----------");
		Менеджеры = ТекКластер.Менеджеры().Список();
		Для Каждого ТекМенеджер Из Менеджеры Цикл
			Параметры = ТекКластер.Менеджеры().ПараметрыОбъекта();
			Для Каждого ТекПараметр Из Параметры Цикл
				Сообщить(СтрШаблон("%1 : %2", ТекПараметр.Значение.ИмяРАК, ТекМенеджер.Получить(ТекПараметр.Значение.ИмяРАК)));
			КонецЦикла;
			Сообщить("----------");
		КонецЦикла;

		Сообщить("----------");
		Сообщить("Сервисы:");
		Сообщить("----------");
		Сервисы = ТекКластер.Сервисы().Список();
		Для Каждого ТекСервис Из Сервисы Цикл
			Параметры = ТекКластер.Сервисы().ПараметрыОбъекта();
			Для Каждого ТекПараметр Из Параметры Цикл
				Сообщить(СтрШаблон("%1 : %2", ТекПараметр.Значение.ИмяРАК, ТекСервис.Получить(ТекПараметр.Значение.ИмяРАК)));
			КонецЦикла;
			Сообщить("----------");
		КонецЦикла;

		Сообщить("----------");
		Сообщить("Соединения:");
		Сообщить("----------");
		Соединения = ТекКластер.Соединения().Список();
		Для Каждого ТекСоединение Из Соединения Цикл
			Параметры = ТекСоединение.ПараметрыОбъекта();
			Для Каждого ТекПараметр Из Параметры Цикл
				Сообщить(СтрШаблон("%1 : %2", ТекПараметр.Значение.ИмяРАК, ТекСоединение.Получить(ТекПараметр.Ключ)));
			КонецЦикла;
			Сообщить("----------");
		КонецЦикла;

		Сообщить("----------");
		Сообщить("РабочиеПроцессы:");
		Сообщить("----------");
		РабочиеПроцессы = ТекКластер.РабочиеПроцессы().Список();
		Для Каждого ТекРабочийПроцесс Из РабочиеПроцессы Цикл
			Параметры = ТекРабочийПроцесс.ПараметрыОбъекта();
			Для Каждого ТекПараметр Из Параметры Цикл
				Сообщить(СтрШаблон("%1 : %2", ТекПараметр.Значение.ИмяРАК, ТекРабочийПроцесс.Получить(ТекПараметр.Ключ)));
			КонецЦикла;
			Сообщить("----------");
		КонецЦикла;

		Сообщить("----------");
		Сообщить("Сеансы:");
		Сообщить("----------");
		Сеансы = ТекКластер.Сеансы().Список();
		Для Каждого ТекСеанс Из Сеансы Цикл
			Параметры = ТекСеанс.ПараметрыОбъекта();
			Для Каждого ТекПараметр Из Параметры Цикл
				Сообщить(СтрШаблон("%1 : %2", ТекПараметр.Значение.ИмяРАК, ТекСеанс.Получить(ТекПараметр.Ключ)));
			КонецЦикла;
			Сообщить("----------");
		КонецЦикла;

		Сообщить("----------");
		Сообщить("ИБ:");
		Сообщить("----------");
		ИБ = ТекКластер.ИнформационныеБазы().Список();
		Для Каждого ТекИБ Из ИБ Цикл
			Параметры = ТекИБ.ПараметрыОбъекта();
			Для Каждого ТекПараметр Из Параметры Цикл
				Сообщить(СтрШаблон("%1 : %2", ТекПараметр.Значение.ИмяРАК, ТекИБ.Получить(ТекПараметр.Ключ)));
			КонецЦикла;
			Сообщить("----------");
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры // ВыполнитьКоманду()

#КонецОбласти // СлужебныйПрограммныйИнтерфейс

#Область СлужебныеПроцедурыИФункции

// Функция - проверяет тип значения на соответствие допустимым типам
//
// Параметры:
//  Значение             - Произвольный                 - проверяемое значение
//  ДопустимыеТипы       - Строка, Массив(Строка, Тип)  - список допустимых типов
//  ШаблонТекстаОшибки   - Строка                       - шаблон строки сообщения об ошибке
//                                                        ("Некорректный тип значения ""%1"" ожидается тип %2")
// 
// Возвращаемое значение:
//	Булево       - Истина - проверка прошла успешно
//
Функция ПроверитьДопустимостьТипа(Знач Значение, Знач ДопустимыеТипы, Знач ШаблонТекстаОшибки = "") Экспорт
	
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗнч(ДопустимыеТипы) = Тип("Строка") Тогда
		МассивДопустимыхТипов = СтрРазделить(ДопустимыеТипы, ",");
	ИначеЕсли ТипЗнч(ДопустимыеТипы) = Тип("Массив") Тогда
		МассивДопустимыхТипов = ДопустимыеТипы;
	Иначе
		ВызватьИсключение СтрШаблон("Некорректно указан список допустимых типов, тип ""%1"" ожидается тип %2!",
		                            Тип(ДопустимыеТипы),
									"""Строка"" или ""Массив""");
	КонецЕсли;
	
	Типы = Новый Соответствие();
	
	СтрокаДопустимыхТипов = "";
	
	Для Каждого ТекТип Из МассивДопустимыхТипов Цикл
		ВремТип = ?(ТипЗнч(ТекТип) = Тип("Строка"), Тип(СокрЛП(ТекТип)), ТекТип);
		Типы.Вставить(ВремТип, СокрЛП(ТекТип));
		Если НЕ СтрокаДопустимыхТипов = "" Тогда
			СтрокаДопустимыхТипов = СтрокаДопустимыхТипов +
				?(МассивДопустимыхТипов.Найти(ТекТип) = МассивДопустимыхТипов.ВГраница(), " или ", ", ");
		КонецЕсли;
	КонецЦикла;
	
	Если ШаблонТекстаОшибки = "" Тогда
		ШаблонТекстаОшибки = "Некорректный тип значения ""%1"" ожидается тип %2!";
	КонецЕсли;
	
	Если Типы[ТипЗначения] = Неопределено Тогда
		ВызватьИсключение СтрШаблон(ШаблонТекстаОшибки, СокрЛП(ТипЗначения), СтрокаДопустимыхТипов);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьДопустимостьТипа()

// Функция - Проверить свойства
//
// Параметры:
//  ПроверяемаяСтруктура     - Структура               - проверяемая структура
//  ОбязательныеСвойства     - Строка, Массив(Строка)  - список обязательных свойств
//  ШаблонТекстаОшибки       - Строка                  - шаблон строки сообщения об ошибке
//                                                       ("Отсутствуют обязательные свойства: %1")
// 
// Возвращаемое значение:
//	Булево       - Истина - проверка прошла успешно
//
Функция ПроверитьСвойства(Знач ПроверяемаяСтруктура, Знач ОбязательныеСвойства, Знач ШаблонТекстаОшибки = "")
	
	ПроверитьДопустимостьТипа(ОбязательныеСвойства,
	                          "Строка, Массив",
	                          "Некорректно указан список обязательных свойств, тип ""%1"", ожидается тип %2!");
							  
	Если ТипЗнч(ОбязательныеСвойства) = Тип("Строка") Тогда
		МассивСвойств = СтрРазделить(ОбязательныеСвойства, ",");
	ИначеЕсли ТипЗнч(ОбязательныеСвойства) = Тип("Массив") Тогда
		МассивСвойств = ОбязательныеСвойства;
	Иначе
		ВызватьИсключение "Некорректно указан список обязательных свойств!";
	КонецЕсли;
	
	СтрокаСвойств = "";
	
	Для Каждого ТекСвойство Из МассивСвойств Цикл
		
		Если ПроверяемаяСтруктура.Свойство(СокрЛП(ТекСвойство)) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаСвойств = СтрокаСвойств
		                      + ?(СтрокаСвойств = "", Символы.ПС, ", " + Символы.ПС)
		                      + """" + СокрЛП(ТекСвойство) + """";
	КонецЦикла;
						  
	Если ШаблонТекстаОшибки = "" Тогда
		ШаблонТекстаОшибки = "Отсутствуют обязательные свойства: %1";
	КонецЕсли;
	
	Если НЕ СтрокаСвойств = "" Тогда
		ВызватьИсключение СтрШаблон(ШаблонТекстаОшибки, СтрокаСвойств);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверитьСвойства()

// Функция - создает необходимые каталоги для указанного пути
//
// Параметры:
//	Путь       - Строка     - проверяемый путь
//	ЭтоФайл    - Булево     - Истина - в параметре "Путь" передан путь к файлу
//                            Ложь - передан каталог
//
// Возвращаемое значение:
//	Булево     - указанный путь доступен
//
Функция ОбеспечитьКаталог(Знач Путь, Знач ЭтоФайл = Ложь) Экспорт
	
	ВремФайл = Новый Файл(Путь);
	
	Если ЭтоФайл Тогда
		Путь = Сред(ВремФайл.Путь, 1, СтрДлина(ВремФайл.Путь) - 1);
		ВремФайл = Новый Файл(Путь);
	КонецЕсли;
	
	Если НЕ ВремФайл.Существует() Тогда
		Если ОбеспечитьКаталог(Сред(ВремФайл.Путь, 1, СтрДлина(ВремФайл.Путь) - 1)) Тогда
			СоздатьКаталог(Путь);
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ВремФайл.ЭтоКаталог() Тогда
		ВызватьИсключение СтрШаблон("По указанному пути ""%1"" не удалось создать каталог", Путь);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ОбеспечитьКаталог()

#КонецОбласти // СлужебныеПроцедурыИФункции
